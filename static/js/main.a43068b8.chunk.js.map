{"version":3,"sources":["component/Header.js","context/AppReducer.js","context/GlobalState.js","component/Balance.js","component/IncomeExpenses.js","component/Transaction.js","component/TransactionList.js","component/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","item","acc","toFixed","IncomeExpenses","income","expense","className","Math","abs","Transaction","sign","text","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a43068b8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h2>\r\n           Expense Tracker \r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","export default (state,action)=>{\r\n    switch(action.type){\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions:state.transactions.filter(transaction=>transaction.id!==action.payload)\r\n        }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions:[action.payload,...state.transactions]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React,{createContext,useReducer} from 'react'\r\nimport AppReducer from \"./AppReducer\";\r\n\r\n\r\n\r\n// Initial State\r\nconst initialState={\r\n    transactions:[]\r\n}\r\n\r\n\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider=({children})=>{\r\n    const [state,dispatch]=useReducer(AppReducer,initialState);\r\n\r\n    //Actions\r\n    function deleteTransaction(id){\r\n        dispatch({\r\n            type:'DELETE_TRANSACTION',\r\n            payload:id\r\n        })\r\n    }\r\n    \r\n    function addTransaction(transactions){\r\n        dispatch({\r\n            type:'ADD_TRANSACTION',\r\n            payload:transactions\r\n        })\r\n    }\r\n\r\n\r\n    return(<GlobalContext.Provider value={{\r\n        transactions:state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>)\r\n}\r\n","import React,{useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Balance = () => {\r\n    const {transactions}=useContext(GlobalContext);\r\n\r\n    const amount = transactions.map(transaction => transaction.amount);\r\n    const total = amount.reduce((item,acc) =>(acc+=item),0).toFixed(2);\r\n    \r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1>{total}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Balance;\r\n","import React,{useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst IncomeExpenses = () => {\r\n    const {transactions}=useContext(GlobalContext);\r\n\r\n    const income = transactions.reduce((acc,item)=>{\r\n        if(item.amount>0)\r\n            acc+=item.amount\r\n        return acc\r\n    },0)\r\n    const expense = transactions.reduce((acc,item)=>{\r\n        if(item.amount<0)\r\n            acc+=item.amount\r\n        return acc\r\n    },0)\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className=\"money plus\">+ Rs {income.toFixed(2)}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className=\"money minus\">- Rs {Math.abs(expense).toFixed(2)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeExpenses\r\n","import React,{useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nconst Transaction = ({transaction}) => {\r\n    const sign = transaction.amount<0 ? '-':'+';\r\n    const {deleteTransaction} =useContext(GlobalContext);\r\n\r\n    return (\r\n        <li className={sign==='-'?\"minus\":\"plus\"}>\r\n            {transaction.text} <span>{sign} Rs {Math.abs(transaction.amount)}</span>\r\n            <button onClick={()=>deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Transaction\r\n","import React,{useContext} from 'react'\r\nimport Transaction from './Transaction'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nconst TransactionList = () => {\r\n    const {transactions} =useContext(GlobalContext);\r\n    \r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map(transaction =>(\r\n                    <Transaction key={transaction.id} transaction={transaction}/>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{useState,useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst AddTransaction = () => {\r\n    const [text,setText]=useState('');\r\n    const [amount,setAmount]=useState(0);\r\n\r\n    const {addTransaction}=useContext(GlobalContext);\r\n\r\n    const onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const newTransaction={\r\n            id: Math.floor(Math.random()*100000000),\r\n            text,\r\n            amount:+amount\r\n        }\r\n        addTransaction(newTransaction)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e)=>setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\"\r\n                    >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n                    >\r\n                    <input type=\"number\" value={amount} onChange={(e)=>setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTransaction\r\n","import React from 'react';\nimport Header from './component/Header';\nimport Balance from './component/Balance';\nimport './App.css';\nimport IncomeExpenses from './component/IncomeExpenses';\nimport TransactionList from './component/TransactionList';\nimport AddTransaction from './component/AddTransaction';\nimport {GlobalProvider} from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList/>\n        <AddTransaction/>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}